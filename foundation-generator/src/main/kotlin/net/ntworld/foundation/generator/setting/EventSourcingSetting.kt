package net.ntworld.foundation.generator.setting

import kotlinx.serialization.Serializable
import net.ntworld.foundation.generator.type.ClassInfo
import net.ntworld.foundation.generator.type.EventField


// ----------------------------------------------------------------------------------
// Single event settings will generate 3 classes
//   1. {$event}Data: contains data of Event
//   2. {$event}Converter: converts Event to generated {$event}Data
//   3. {$event}MessageTranslator: converts {$event} to Message and vice versa
// ----------------------------------------------------------------------------------
// How to detect and create settings in processor?
//   - determine Event by @EventSourcing
//   - set EventField.metadata = true by @EventSourcing.Metadata
//   - set EventField.encrypted = true + faked by @EventSourcing.Encrypted
// ----------------------------------------------------------------------------------
// Register to AutoGeneratedInfrastructureProvider:
//   - All generated classes will be register to the globalDirectory automatically
// ----------------------------------------------------------------------------------

@Serializable
data class EventSourcingSetting(
    val event: ClassInfo,
    val implementation: ClassInfo,
    val fields: List<EventField>,
    val type: String,
    val variant: Int,
    val hasSecondConstructor: Boolean
) : Setting {
    override val name: String = "${event.packageName}.${event.className}"

    companion object {
        object Comparision : Comparator<EventSourcingSetting> {
            override fun compare(o1: EventSourcingSetting?, o2: EventSourcingSetting?): Int {
                if (null === o1 || null === o2) {
                    return 0
                }

                val byType = o1.type.compareTo(o2.type)
                if (byType == 0) {
                    return o2.variant.compareTo(o1.variant)
                }
                return byType
            }

        }
    }
}